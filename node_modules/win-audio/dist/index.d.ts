/// <reference types="node" />
import EventEmitter from "events";
type Event<T extends EventType> = T extends "change" ? {
    old: number;
    new: number;
} : {
    old: boolean;
    new: boolean;
};
type EventType = "change" | "toggle";
declare const initDevice: (mic: boolean) => {
    on: <T extends EventType>(event: T, cb: (v: Event<T>) => void) => EventEmitter;
    off: <T_1 extends EventType>(event: T_1, cb: (v: Event<T_1>) => void) => EventEmitter;
    once: <T_2 extends EventType>(event: T_2, cb: (v: Event<T_2>) => void) => EventEmitter;
    removeAllListeners: () => EventEmitter;
    start: (every: number) => void;
    stop: () => void;
    get: () => number;
    set: (value: number) => void;
    increase: (value: number) => void;
    decrease: (value: number) => void;
    mute: () => void;
    unmute: () => void;
    isMuted: () => boolean;
    toggle: () => void;
};
type Instance = ReturnType<typeof initDevice>;
type ProxyInstances = {
    speaker: Instance;
    mic: Instance;
};
declare const proxy: ProxyInstances;
export default proxy;
